app:
  token: ${TG_TOKEN}
  name: LinkTracker
  about: Бот для отслеживания изменений на страницах
  description: С помощью этого бота вы можете отслеживать обновление контента на таких страницах, как stackoverflow и GitHub.
  zone-offset: 3
  ip-whitelist: ${IP_WHITELIST:}
  kafka-topics:
    dlq-suffix: _dlq
    link-update: linkUpdate

spring:
  application:
    name: bot
  jackson:
    time-zone: UTC
  cache:
    cache-names:
      - rate-limit-buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
  kafka:
    bootstrap-servers: ${KAFKA_URL:localhost:9092}
    consumer:
      group-id: bot
      bootstrap-servers: ${KAFKA_URL:localhost:9092}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: edu.java.bot.dto.request.LinkUpdate
    producer:
      bootstrap-servers: ${KAFKA_URL:localhost:9092}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
api-client:
  scrapper:
    base-url: ${SCRAPPER_API_CLIENT_BASE_URL}

retry:
  scrapper:
    retry-type: exponential
    max-retries: 3
    initial-interval: 5s
    codes: 408, 429, 500, 501, 502, 503, 504, 521, 522, 523, 524

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets
      url: .*
      http-status-code: TOO_MANY_REQUESTS
      http-content-type: application/json
      http-response-body: "{
        \"description\": \"Слишком много запросов\",
        \"status\": \"TOO_MANY_REQUESTS\",
        \"exceptionName\": \"TooManyRequestsException.class\",
        \"exceptionMessage\": \"Too many requests\",
        \"stacktrace\": []
      }"
      rate-limits:
        - cache-key: getRemoteAddr()
          skip-condition: '@rateLimiterService.isSkipped(getRemoteAddr())'
          bandwidths:
            - capacity: 100
              time: 1
              unit: MINUTES
              refill-speed: interval

management:
  metrics:
    tags:
      application: ${spring.application.name}
  endpoints:
    web:
      base-path: /
      path-mapping:
        prometheus: /metrics
      exposure:
        include: info, health, prometheus
  endpoint:
    info:
      enabled: true
    health:
      enabled: true
    prometheus:
      enabled: true
  server:
    port: 8091

server:
  port: 8090

logging:
  config: classpath:log4j2-plain.xml


springdoc:
  swagger-ui:
    path: /swagger-ui
